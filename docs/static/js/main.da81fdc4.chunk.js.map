{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","handleSubmit","e","preventDefault","console","log","trim","length","categories","onSubmit","type","value","onChange","target","placeholder","getGifts","category","a","q","giphy_url","encodeURI","fetch","resp","json","data","map","img","idx","id","user","username","title","url","images","downsized_medium","gifs","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE7B,EAAsCC,mBAAS,IAA/C,mBAAQC,EAAR,KAAoBC,EAApB,KAEMC,EAAgC,SAAEC,GACtCA,EAAEC,iBACFC,QAAQC,IAAI,uBAAuB,mCAAoCN,GAElEA,EAAWO,OAAOC,OAAS,GAC9BV,GAAe,SAAAW,GAAU,OAAMT,GAAN,mBAAqBS,OAC9CR,EAAc,KAEdI,QAAQC,IAAI,sCAAsC,mBAItD,OACE,uBAAMI,SAAYR,EAAlB,UACE,6BAAMF,IACJ,uBACEW,KAAc,OACdC,MAAgBZ,EAChBa,SAnB8B,SAAEV,GAASF,EAAcE,EAAEW,OAAOF,QAoBhEF,SAAgBR,EAChBa,YAAc,2B,+BC3BlBC,EAAQ,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,4DAEU,mCACA,GACjBC,EAAiBF,EAEjBG,EANO,uDAEU,mCAFV,kBAGU,GAHV,cAM4FC,UAAUF,IANtG,SAOgBG,MAAMF,GAPtB,cAOPG,EAPO,gBAQgBA,EAAKC,OARrB,uBAQLC,EARK,EAQLA,KARK,UAWMA,EAAKC,KAAK,SAAEC,EAAKC,GAAU,IAAD,EACzC,MAAO,CACHC,GAAWF,EAAIE,GACfC,KAAWH,EAAIG,KACfC,SAAWJ,EAAII,SACfC,MAAWL,EAAIK,MACfC,IAAG,UAAQN,EAAIO,cAAZ,aAAQ,EAAYC,iBAAiBF,QAjBnC,eAWPG,EAXO,yBAsBLA,GAtBK,4CAAH,sDA0BCpB,ICvBFqB,EAAc,SAAC,GAA0B,IAAvBR,EAAsB,EAAtBA,GAAIG,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IAIxC,OACE,sBAAKK,UAAU,6CAAf,UACE,qBAAKC,IAAMN,EAAMO,IAAMR,IACvB,4BAAKA,MAF2DH,ICHzDY,EAAU,SAAC,GAAoB,IAAjBxB,EAAgB,EAAhBA,SACzB,ECH0B,SAAEA,GAE5B,MAA0BlB,mBAAS,CACjC0B,KAAU,GACViB,SAAU,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAoBA,OAfAC,qBAAW,WAET7B,EAAUC,GACP6B,MAAM,SAAAC,GAELH,EAAS,CACPnB,KAAUsB,EACVL,SAAU,SAMf,CAAEzB,IAEE0B,EDnB0BK,CAAa/B,GAAjCiB,EAAb,EAAQT,KAAaiB,EAArB,EAAqBA,QAGrB,OAEE,qCACE,6BAAMzB,IADR,IACwB,uBAEpByB,GAAW,2CAGb,qBAAKJ,UAAU,YAAf,SAGIJ,EAAOR,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEOA,GADKA,EAAIE,aEiBboB,G,MAjCM,WACnB,MAAoClD,mBAAS,CAAC,KAA9C,mBAAOU,EAAP,KAAmBX,EAAnB,KAUA,OACE,qCACE,oBAAIwC,UAAU,sDAAd,0BACA,uBAEA,cAAC,EAAD,CAAaxC,cAAkBA,IAE/B,6BAEIW,EAAWiB,KAAK,SAAET,EAAUW,GAAZ,OACd,cAAC,EAAD,CAEEX,SAAaA,GADAW,a,MCrB3BsB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.da81fdc4.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from \"prop-types\"\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n  const [ inputValue, setInputValue ] = useState(\"\")\r\n  const handleInputChange             = ( e ) => { setInputValue(e.target.value) }\r\n  const handleSubmit                  = ( e ) => {  \r\n    e.preventDefault() \r\n    console.log(\"%c<AddCategory /> %s\",\"color: coral; font-size: 1.2rem;\", inputValue)\r\n\r\n    if ( inputValue.trim().length > 2 ) {  \r\n      setCategories( categories => [ inputValue, ...categories ] )\r\n      setInputValue(\"\")\r\n    } else {  \r\n      console.log(\"%cPor favor dame mas de dos letras!\",\"color: tomato;\")  \r\n    }  \r\n  }\r\n\r\n  return (\r\n    <form onSubmit= { handleSubmit }>\r\n      <h1>{ inputValue }</h1>\r\n        <input \r\n          type        = \"text\" \r\n          value       = { inputValue }\r\n          onChange    = { handleInputChange }        \r\n          onSubmit    = { handleSubmit }\r\n          placeholder = \"Introduce un valor\"\r\n        />\r\n    </form>\r\n  ) \r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n","const getGifts = async (category) => {  \r\n    /* 01 Obtenemos los gifts */\r\n    const GIPHY_API_Key  = \"GOcWQKqeSiIiopLoNpmKczCJhvhzoyM5\" \r\n    const limit          = 10 \r\n    const q              = category \r\n\r\n    const giphy_url      = `https://api.giphy.com/v1/gifs/search?api_key=${GIPHY_API_Key}&limit=${limit}&q=${encodeURI(q)}`\r\n    const resp           = await fetch(giphy_url)  \r\n    const { data }       = await resp.json() \r\n\r\n    /* 02 Solo creamos objetos con la info que necesitamos */\r\n    const gifs = await data.map( ( img, idx ) => {  \r\n        return {\r\n            id       : img.id,\r\n            user     : img.user ,\r\n            username : img.username,\r\n            title    : img.title,\r\n            url      : img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    /* console.log(gifs)  */    \r\n    return (gifs)\r\n\r\n}  \r\n\r\nexport default getGifts\r\n","\r\nimport React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n    \r\n  /* console.log( { id, title, img } ) */\r\n  /* https://animate.style/ */\r\n  return (\r\n    <div className=\"card animate__animated animate__zoomInDown\" key={ id }>\r\n      <img src={ url } alt={ title } />\r\n      <p>{ title }</p>\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\n\r\n","/* import React, { useState, useEffect, Fragment } from 'react' */\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ( { category } ) => {  \r\n  const { data:images, loading } = useFetchGifs(category)\r\n  /* console.log(data, loading) */\r\n\r\n  return ( \r\n\r\n    <>\r\n      <h3>{ category }</h3> <hr />      \r\n\r\n      { loading && <p>Loading...</p> }\r\n\r\n      {/* 04 destructuramos el estado y lo enviamos al nuevo componente GifGridItem */}\r\n      <div className=\"card-grid\"> \r\n\r\n        {\r\n          images.map( img => ( \r\n            <GifGridItem \r\n              key   = { img.id }  \r\n              { ...img }\r\n            />\r\n          ))\r\n        }\r\n\r\n      </div>  \r\n    </>\r\n\r\n  ) \r\n}  \r\n\r\n\r\n","import { useEffect, useState } from \"react\"\r\nimport getGifts from \"../helpers/getGifs\"\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n  const [state, setState] = useState({\r\n    data    : [], \r\n    loading : true \r\n  })\r\n\r\n  useEffect( () => {\r\n\r\n    getGifts( category )    \r\n      .then( imgs => {\r\n\r\n        setState({\r\n          data    : imgs,\r\n          loading : false\r\n        })\r\n\r\n\r\n      })\r\n\r\n  }, [ category ] ) \r\n\r\n  return state // { data: [], loading: true }\r\n}\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nimport \"animate.css\"\r\n\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState(['']) \r\n  /* console.log(categories); */\r\n  //const handleAdd = () => {\r\n  //  //setCategories( ['HunterXHunter', ...categories ] )\r\n  //  setCategories( categories => [ ...categories, 'nuevo ITEM'] )\r\n  //  console.log(categories);\r\n  //}\r\n\r\n  /* console.log(categories); */\r\n\r\n  return (\r\n    <>\r\n      <h2 className=\"animate__animated animate__bounce animate__delay_2s\">GifExpertApp</h2>\r\n      <hr />\r\n\r\n      <AddCategory setCategories = { setCategories } />\r\n\r\n      <ol>       \r\n        { \r\n          categories.map( ( category, idx ) => (\r\n            <GifGrid \r\n              key      = { idx } \r\n              category = { category } \r\n            />\r\n          ))\r\n\r\n        } \r\n      </ol>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GifExpertApp\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n \nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}